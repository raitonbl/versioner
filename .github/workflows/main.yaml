name: PACK & PUBLISH
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
jobs:
  # Get version
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - id: get_version
        name: Read Version
        run: echo "version=$(jq -r '.version' package.json)-SNAPSHOT.$GITHUB_RUN_NUMBER" >> "$GITHUB_OUTPUT"

  unit_testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Git Checkout
      - uses: actions/setup-go@v3
        name: Initialize Development environment
        with:
          go-version: '1.18.3' # The Go version to download (if necessary) and use.
      - run:  go mod tidy
        name: Download dependencies
      - run:  go test -covermode=count -coverpkg=./... -coverprofile coverage.out -v ./...
        name: Execute
      - run: go tool cover -html coverage.out -o coverage.html
        name: Generate HTML from coverate.out
      - name: Upload Code coverage report into Github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage.out
          path: coverage.out
          retention-days: 1
      - name: Upload Code coverage.html report into Github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: coverage.html
          path: coverage.html
          retention-days: 1
  build:
    runs-on: ubuntu-latest
    needs:
      - unit_testing
    steps:
      - uses: actions/checkout@v3
        name: Git Checkout
      - uses: actions/setup-go@v3
        name: Initialize Development environment
        with:
          go-version: '1.18.3' # The Go version to download (if necessary) and use.
      - run:  go mod tidy
        name: Download dependencies
      - name: Create dist directory
        run: mkdir dist
      - run:  go build cmd/main.go
        name: Build application
      - name: Move application into dist directory
        run:  sudo mv main dist/versioner
      - name: Upload application into Github artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./dist
          retention-days: 0
  build-image:
    needs:
      - build
      - version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/download-artifact@master
        name: Download  dist directory
        with:
            name: dist
            path: dist
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/versioner:ubuntu-${{ needs.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/versioner:ubuntu-latest
  push:
    needs:
      - version
      - build-image
    runs-on: ubuntu-latest
    #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker image to dockerhub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/versioner:ubuntu-${{ needs.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/versioner:ubuntu-latest
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image to github
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/versioner:ubuntu-${{ needs.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/versioner:ubuntu-latest